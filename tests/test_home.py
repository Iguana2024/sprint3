import unittest
from unittest.mock import patch

from home import *

class TestCheckUserPermission(unittest.TestCase):
    def test_hash_ip(self):
        ip = "192.168.1.1"
        salt = "5gz"
        expect_hash_ip = hashlib.md5((ip + salt).encode()).hexdigest()
        actual_hash_ip = hash_ip(ip)
        self.assertEqual(actual_hash_ip, expect_hash_ip) 

    def test_check_user_permission_present(self):
        test_ip = '192.168.1.1'
        expected_result = {'IP': '192.168.1.1'}

        # Mocking the find_one method of the permissions collection
        with patch('home.permissions.find_one') as mock_find_one:
            #next line was generated by ChatGPT
            mock_find_one.side_effect = lambda query: expected_result if query['IP'] == test_ip else None

            permission_present = check_user_permission(test_ip)
            self.assertEqual(permission_present, expected_result)

    def test_check_user_rejection_present(self):
        test_ip = '192.168.1.1'
        expect_hash_ip = hash_ip(test_ip)
        expect_result = {'hashed_ip': expect_hash_ip}

        # Mocking the find_one method of the rejections collection
        with patch('home.rejections.find_one') as mock_find_one:
            #next line was generated by ChatGPT
            mock_find_one.side_effect = lambda query: expect_result if query['hashed_ip'] == expect_hash_ip else None

            rejection_present = check_user_rejection(test_ip)
            self.assertEqual(rejection_present, expect_result)

    def test_get_user_decision_granted(self):
        test_ip = '192.168.1.1'

        with patch('home.check_user_permission') as mock_check_user_permission, \
                patch('home.check_user_rejection') as mock_check_user_rejection:
            mock_check_user_permission.return_value = {'IP': test_ip}
            mock_check_user_rejection.return_value = None

            result_is_granted = get_user_decision(test_ip)

            self.assertEqual(result_is_granted, 'granted')

    def test_get_user_decision_rejected(self):
        test_ip_rejected = '192.168.5.1'

        with patch('home.check_user_permission') as mock_check_user_permission, \
                patch('home.check_user_rejection') as mock_check_user_rejection:
            mock_check_user_permission.return_value = None
            mock_check_user_rejection.return_value = {'hashed_ip': 'some_hash'}

            result_is_rejected = get_user_decision(test_ip_rejected)

            self.assertEqual(result_is_rejected, 'rejected')

    def test_get_user_decision_no_decision(self):
        test_ip = '192.168.10.1'

        with patch('home.check_user_permission') as mock_check_user_permission, \
                patch('home.check_user_rejection') as mock_check_user_rejection:
            mock_check_user_permission.return_value = None
            mock_check_user_rejection.return_value = None

            result_is_absent = get_user_decision(test_ip)

            self.assertIsNone(result_is_absent)

    def test_granted_permission():
        with app.test_client() as client:
            response = client.get('/granted_permission')
            assert response.status_code == 200
            assert b'You have granted permission to store your data.' in response.data

    def test_rejected_permission():
         with app.test_client() as client:
            response = client.get('/rejected_permission')
            assert response.status_code == 200
            assert b'You have rejected permission to store your data.' in response.data